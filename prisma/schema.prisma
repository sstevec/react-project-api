generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  name                    String
  email                   String                   @unique
  password                String
  profilePicUrl           String?
  gender                  String? // "Male", "Female", "Other"
  dateOfBirth             DateTime? // User's date of birth
  weight                  Float? // Body weight (kg)
  createdAt               DateTime                 @default(now())
  CompetitionHeld         Competition[]
  CompetitionParticipated CompetitionParticipant[]
}

model Friend {
  id       String @id @default(uuid())
  userId   String
  friendId String
  status   String @default("pending")

  @@unique([userId, friendId]) // Ensures no duplicate friendships
}

model Calorie {
  id        String   @id @default(uuid())
  userId    String
  name      String
  type      String // "intake" or "exercise"
  detail    String // JSON string with additional details
  calories  Int // Always positive
  createdAt DateTime @default(now())

  @@index([userId, createdAt]) // For fast lookup by user
}

model Post {
  id        String   @id @default(uuid())
  userId    String
  content   String
  imageUrl  String?
  access    String   @default("public") // public or friend_only
  createdAt DateTime @default(now())

  @@index([userId, createdAt]) // Query most recent posts
}

model Competition {
  id          String   @id @default(uuid())
  creatorId   String
  title       String
  description String
  objective   String // What participants compete on (e.g., total calories burned, walking calories)
  rankMethod  String // "ascending" or "descending"
  access      String // "public" or "friend_only"
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime @default(now())

  creator      User                     @relation(fields: [creatorId], references: [id])
  participants CompetitionParticipant[]
}

model CompetitionParticipant {
  id            String  @id @default(uuid())
  competitionId String
  userId        String
  progressData  String?

  competition Competition @relation(fields: [competitionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}
